# Nombre del workflow que aparecer√° en la pesta√±a "Actions" de GitHub
name: Pipeline de CI/CD Final

# Disparadores: Se ejecuta al hacer push o pull request a la rama 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Definici√≥n de los trabajos (jobs) a ejecutar
jobs:
  # --- TRABAJO 1: CORRER TODAS LAS PRUEBAS ---
  test:
    name: ‚úÖ Validar y Probar
    runs-on: ubuntu-latest
    steps:
      # 1. Descarga el c√≥digo del repositorio a la m√°quina virtual
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4

      # 2. Configura el entorno de Python
      - name: Configurar Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # 3. Instala las dependencias del backend
      - name: Instalar dependencias del Backend
        run: pip install -r requirements.txt
      
      # 4. Instala las dependencias del frontend
      - name: Instalar dependencias del Frontend
        run: |
          cd prediccion-ina-app
          npm install

      # 5. Levanta la Base de Datos de Prueba para Pytest
      - name: Levantar servicios de prueba
        run: docker-compose -f docker-compose.test.yml up -d

      # 6. Corre las pruebas del backend con Pytest
      - name: Correr pruebas de Backend (Pytest)
        run: pytest
      
      # 7. Corre las pruebas unitarias del frontend con Jest
      - name: Correr pruebas Unitarias (Jest)
        run: |
          cd prediccion-ina-app
          npm test -- --watchAll=false
      
      # 8. Inicia el backend para las pruebas E2E
      # Lo corremos en segundo plano para que el siguiente paso pueda ejecutarse
      - name: Iniciar Backend en segundo plano
        run: python backend.py &

      # 9. Corre las pruebas End-to-End con Cypress
      - name: Correr pruebas End-to-End (Cypress)
        run: |
          cd prediccion-ina-app
          npm run test:e2e

      # 10. Apaga los servicios de prueba (se ejecuta siempre)
      # Este paso es crucial para limpiar los recursos de Docker.
      - name: Apagar servicios de prueba
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # --- TRABAJO 2: CONSTRUIR Y PUBLICAR IM√ÅGENES ---
  build-and-push:
    name: üì¶ Construir y Publicar Im√°genes
    # Solo se ejecuta si el trabajo 'test' fue exitoso
    needs: test
    runs-on: ubuntu-latest
    steps:
      # 1. Descarga el c√≥digo del repositorio
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4

      # 2. Inicia sesi√≥n en Docker Hub
      # Usa los secretos que configurar√°s en tu repositorio de GitHub
      - name: Iniciar sesi√≥n en Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Construye las im√°genes de producci√≥n usando el docker-compose principal
      - name: Construir im√°genes de Docker
        run: docker-compose -f docker-compose.yml build

      # 4. Etiqueta (Tag) las im√°genes para subirlas a Docker Hub
      # RECUERDA REEMPLAZAR 'tu-usuario' con tu nombre de usuario real de Docker Hub
      - name: Etiquetar im√°genes
        run: |
          docker tag mi_app_backend tu-usuario/mi-app-backend:latest
          docker tag mi_app_frontend tu-usuario/mi-app-frontend:latest
      
      # 5. Empuja (Push) las im√°genes al registro de Docker Hub
      - name: Publicar im√°genes en Docker Hub
        run: |
          docker push tu-usuario/mi-app-backend:latest
          docker push tu-usuario/mi-app-frontend:latest
