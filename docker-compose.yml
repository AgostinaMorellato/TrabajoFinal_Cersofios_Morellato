# Nombre del workflow
name: Pipeline de CI/CD Final

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # --- TRABAJO 1: CORRER TODAS LAS PRUEBAS ---
  test:
    name: ‚úÖ Validar y Probar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4
      # ... (todos los pasos de testing que ya funcionan)
      - name: Configurar Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Instalar dependencias del Backend
        run: pip install -r requirements.txt
      - name: Instalar dependencias del Frontend
        run: |
          cd frontend
          npm install
      - name: Levantar servicios de prueba
        run: docker compose -f docker-compose.test.yml up -d
      - name: Correr pruebas de Backend (Pytest)
        run: pytest
      - name: Correr pruebas Unitarias (Jest)
        run: |
          cd frontend
          npm test -- --watchAll=false
      - name: Iniciar Backend en segundo plano
        run: python backend.py &
      - name: Correr pruebas End-to-End (Cypress)
        run: |
          cd frontend
          npm run test:e2e
      - name: Apagar servicios de prueba
        if: always()
        run: docker compose -f docker-compose.test.yml down

  # --- TRABAJO 2: CONSTRUIR Y EMPAQUETAR IM√ÅGENES ---
  build-and-package:
    name: üì¶ Construir y Empaquetar Im√°genes
    # Solo se ejecuta si el trabajo 'test' fue exitoso
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4

      # Ya no necesitamos iniciar sesi√≥n en Docker Hub
      # - name: Iniciar sesi√≥n en Docker Hub ...

      # 1. Construye las im√°genes de producci√≥n
      - name: Construir im√°genes de Docker
        run: docker compose -f docker-compose.yml build

      # 2. Empaqueta las im√°genes en archivos .tar
      - name: Guardar im√°genes como archivos tar
        run: |
          docker save mi_app_backend:latest > backend-image.tar
          docker save mi_app_frontend:latest > frontend-image.tar

      # 3. Sube los archivos .tar como artefactos del workflow
      - name: Subir artefactos de imagen
        uses: actions/upload-artifact@v4
        with:
          # El nombre del archivo ZIP que podr√°s descargar
          name: docker-images
          # Los archivos que se incluir√°n en el ZIP
          path: |
            backend-image.tar
            frontend-image.tar
