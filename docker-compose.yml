# Versión de la sintaxis de Docker Compose
version: '3.8'

# Definición de los servicios (contenedores) de nuestra aplicación
services:

  # Servicio del Backend de Python/Flask
  backend:
    # Construye la imagen usando el Dockerfile en el directorio actual (.)
    build: .
    # Nombra el contenedor para identificarlo fácilmente
    container_name: mi_app_backend
    # Mapea el puerto 5001 del contenedor al 5001 de la máquina host
    # Así podemos acceder a la API directamente si lo necesitamos
    ports:
      - "5001:5001"
    # El backend no se iniciará hasta que el servicio 'db' esté listo
    depends_on:
      - db
    # Las variables de entorno que tu backend necesita para conectarse a la BD.
    # Fíjate que el 'host' es 'db', el nombre del servicio de la base de datos.
    environment:
      - DATABASE_URL=postgresql+psycopg2://user_prod:pass_prod@db:5432/db_prod
    # NOTA: En un entorno de producción real, estos valores vendrían de un
    # sistema de gestión de secretos, no estarían escritos aquí.

  # Servicio del Frontend de React/Nginx
  frontend:
    # Construye la imagen usando el Dockerfile que está en la carpeta ./frontend
    build: ./prediccion-ina-app
    container_name: mi_app_frontend
    # Mapea el puerto 80 del contenedor (donde escucha Nginx) al puerto 3000
    # de nuestra máquina. Accederemos a la app desde http://localhost:3000
    ports:
      - "3000:80"
    # El frontend depende del backend para las llamadas a la API
    depends_on:
      - backend

  # Servicio de la Base de Datos PostgreSQL
  db:
    # Usa la imagen oficial de PostgreSQL
    image: postgres:13
    container_name: mi_app_db
    # Las credenciales para la base de datos de producción
    environment:
      - POSTGRES_USER=user_prod
      - POSTGRES_PASSWORD=pass_prod
      - POSTGRES_DB=db_prod
    # Monta un volumen para que los datos de la base de datos persistan
    # incluso si el contenedor se destruye y se vuelve a crear.
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # No es necesario exponer los puertos de la base de datos al exterior,
    # ya que el backend se comunica con ella a través de la red interna de Docker.

# Definición de los volúmenes nombrados
volumes:
  postgres_data:
